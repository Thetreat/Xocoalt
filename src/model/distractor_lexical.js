let natural = require("natural");
let w = "participation";
let ww = natural.PorterStemmer.stem(w);

const suffixesV = [
  "able",
  "able",
  "ac",
  "acity",
  "ocity",
  "ade",
  "age",
  "aholic",
  "oholic",
  "al",
  "algia",
  "an",
  "ian",
  "ance",
  "ant",
  "ar",
  "ard",
  "arian",
  "arium",
  "orium",
  "ary",
  "ate",
  "ation",
  "ation",
  "ation",
  "ation",
  "ative",
  "ectomy",
  "ed",
  "ed",
  "ed",
  "ed",
  "ed",
  "ed",
  "ed",
  "ed",
  "ed",
  "ed",
  "ed",
  "ed",
  "ed",
  "ed",
  "ed",
  "ed",
  "ed",
  "ed",
  "ed",
  "ed",
  "ee",
  "eer",
  "emia",
  "en",
  "ence",
  "ency",
  "ent",
  "er",
  "er",
  "er",
  "er",
  "ern",
  "escence",
  "es",
  "es",
  "es",
  "es",
  "es",
  "es",
  "es",
  "es",
  "es",
  "es",
  "es",
  "es",
  "es",
  "es",
  "es",
  "es",
  "es",
  "es",
  "es",
  "es",
  "es",
  "es",
  "es",
  "es",
  "es",
  "es",
  "es",
  "es",
  "es",
  "es",
  "es",
  "ese",
  "est",
  "etic",
  "ette",
  "ial",
  "ian",
  "iasis",
  "iatric",
  "ible",
  "ible",
  "ic",
  "ical",
  "ile",
  "ily",
  "ine",
  "ing",
  "ing",
  "ing",
  "ing",
  "ing",
  "ing",
  "ing",
  "ing",
  "ing",
  "ing",
  "ing",
  "ing",
  "ing",
  "ing",
  "ion",
  "ion",
  "ion",
  "ion",
  "ious",
  "ish",
  "ism",
  "ist",
  "ite",
  "ition",
  "ition",
  "ition",
  "ition",
  "itis",
  "ity",
  "ive",
  "ization",
  "ize",
  "oid",
  "ology",
  "oma",
  "onym",
  "opia",
  "opsy",
  "or",
  "or",
  "or",
  "or",
  "ory",
  "osis",
  "ostomy",
  "otomy",
  "ous",
  "ular",
  "uous",
  "ure",
  "y",
];

const suffixesC = [
  "cide",
  "cracy",
  "crat",
  "cule",
  "cy",
  "cycle",
  "dom",
  "dox",
  "ful",
  "fy",
  "gam",
  "gamy",
  "gon",
  "gonic",
  "hood",
  "less",
  "let",
  "like",
  "ling",
  "loger",
  "loger",
  "log",
  "ly",
  "ly",
  "ly",
  "ly",
  "ly",
  "ly",
  "ly",
  "ment",
  "ness",
  "path",
  "pathy",
  "phile",
  "phobia",
  "phone",
  "phyte",
  "plegia",
  "plegic",
  "pnea",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "scopy",
  "scope",
  "scribe",
  "script",
  "sect",
  "ship",
  "sion",
  "some",
  "sophy",
  "sophic",
  "th",
  "tion",
  "tion",
  "tion",
  "tion",
  "tome",
  "tomy",
  "trophy",
  "tude",
  "ty",
  "ward",
  "ware",
  "wise",
];

const l1 = suffixesV.length - 1;
const l2 = suffixesC.length - 1;

function distractorMakr(ww, data) {
  const fs = require("fs");
  if (data === undefined) {
    data = fs.readFileSync("src/model/corncob_lowercase.txt");
  }
  const f = ww.charAt(-1);
  let www;
  if (["a", "e", "i", "o", "u", "y"].includes(f)) {
    const n = Math.floor(Math.random() * l2);
    www = ww.concat(suffixesC[n]);
  } else {
    const m = Math.floor(Math.random() * l1);
    www = ww.concat(suffixesV[m]);
  }
  if (data.includes(www + "\r") && www !== ww) {
    return www;
  } else {
    return distractorMakr(ww, data);
  }
}

function end(ww) {
  const choices = [];
  for (let i = 0; i < 3; i++) {
    let temp = distractorMakr(ww);
    while (choices.includes(temp)) {
      temp = distractorMakr(ww);
    }
    choices[i] = temp;
  }
  return choices;
}

console.log(end(ww));
